pd.options.display.max_columns=999
train=pd.read_csv('../input/DontGetKicked/training.csv')
train
test=pd.read_csv('../input/DontGetKicked/test.csv')
test
all_data=pd.concat([train,test])
all_data
all_data['PurchDate']=pd.to_datetime(all_data['PurchDate'])
all_data['Month']=all_data['PurchDate'].dt.month
all_data['Year']=all_data['PurchDate'].dt.year
all_data['Day']=all_data['PurchDate'].dt.day
all_data
all_data2=all_data.drop(columns=['PurchDate','RefId','IsBadBuy'])
all_data2
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
c=all_data2.columns[all_data2.dtypes==object] #조건 부여 옵션 
for i in c:
    all_data2[i]=le.fit_transform(list(all_data2[i])) #먼저 리스트처리 해주기, list만나면 형식이 카테고리화 된다. 우리 모델이 학습을 할 수 있음. 결측치도 다 의미있음! 
    #eg.보험데이터의 경우, 공란으로 둔 설문이 있으면, 데이터 수집 시 결측치로 나오겠지? 근데 이것도 정보로 체크해서 받아들임, 이것도 학습해야해,그래서 카테고리화 시켜준다. 
    print(i)
all_data2=all_data2.fillna(-1) 
# 결측치는 값이 비어있는 느낌에 가까움. 그 값 자체가 0인데, 값이 있어야 하는데 없는거랑은 다름. 결측치를 -1로 넣어버리면,결측치를 뭔가 이상한 값, 다른 값이라고 인식하게 된다.
#원래 들어가있는 데이터들과는 다른 느낌으로 값을 치환해줘야 한다. 
#대부분 값이 >0이라서 음수로 넣어줘버리자, 겹치지 않도록 , 평균은 오히려 겹치는 효과때문에
train2=all_data2[:len(train)] # 맨 왼쪽부터 트레인 셋 갯수까지만
test2=all_data2[len(train):] #트레인 개수 제외하고 나머지를 들고 올게

from xgboost import XGBClassifier
xg=XGBClassifier()
xg.fit(train2,train['IsBadBuy'])
result=xg.predict_proba(test2)
result
sub=pd.read_csv('../input/DontGetKicked/example_entry.csv')
sub
sub['IsBadBuy']=result[:,1]
sub.to_csv('kickit4.csv',index=0)
